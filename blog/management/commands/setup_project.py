"""
Commande de management Django pour configurer automatiquement le projet
"""

import os
import sys
from django.core.management.base import BaseCommand, CommandError
from django.core.management import call_command
from django.contrib.auth import get_user_model
from django.db import connection
from django.conf import settings

User = get_user_model()


class Command(BaseCommand):
    help = "Configure automatiquement le projet Django (migrations, superuser, donn√©es de test)"

    def add_arguments(self, parser):
        parser.add_argument(
            "--skip-migrations", action="store_true", help="Ignorer les migrations"
        )
        parser.add_argument(
            "--skip-superuser",
            action="store_true",
            help="Ignorer la cr√©ation du superutilisateur",
        )
        parser.add_argument(
            "--skip-data",
            action="store_true",
            help="Ignorer le peuplement des donn√©es de test",
        )
        parser.add_argument(
            "--force",
            action="store_true",
            help="Forcer la recr√©ation (efface la base de donn√©es)",
        )
        parser.add_argument(
            "--superuser-email",
            type=str,
            default="admin@bloghub.com",
            help="Email du superutilisateur (d√©faut: admin@bloghub.com)",
        )
        parser.add_argument(
            "--superuser-password",
            type=str,
            default="admin",
            help="Mot de passe du superutilisateur (d√©faut: admin)",
        )

    def handle(self, *args, **options):
        """Point d'entr√©e principal de la commande"""

        self.stdout.write(
            self.style.SUCCESS(
                "\n" + "=" * 60 + "\n" "üöÄ CONFIGURATION DU PROJET DJANGO\n" + "=" * 60
            )
        )

        try:
            # 1. V√©rifier la connexion √† la base de donn√©es
            self._check_database_connection()

            # 2. G√©rer les migrations
            if not options["skip_migrations"]:
                self._handle_migrations(options["force"])
            else:
                self.stdout.write(self.style.WARNING("‚è≠Ô∏è  Migrations ignor√©es"))

            # 3. Cr√©er le superutilisateur
            if not options["skip_superuser"]:
                self._create_superuser(
                    options["superuser_email"], options["superuser_password"]
                )
            else:
                self.stdout.write(
                    self.style.WARNING("‚è≠Ô∏è  Cr√©ation du superutilisateur ignor√©e")
                )

            # 4. Peupler avec des donn√©es de test
            if not options["skip_data"]:
                self._populate_test_data()
            else:
                self.stdout.write(
                    self.style.WARNING("‚è≠Ô∏è  Peuplement des donn√©es ignor√©")
                )

            # 5. Afficher le r√©sum√© final
            self._display_summary(options)

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå Erreur lors de la configuration: {str(e)}")
            )
            raise CommandError(f"√âchec de la configuration: {str(e)}")

    def _check_database_connection(self):
        """V√©rifier la connexion √† la base de donn√©es"""
        self.stdout.write("üîç V√©rification de la connexion √† la base de donn√©es...")

        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
            self.stdout.write(
                self.style.SUCCESS("‚úÖ Connexion √† la base de donn√©es OK")
            )
        except Exception as e:
            raise CommandError(
                f"Impossible de se connecter √† la base de donn√©es: {str(e)}"
            )

    def _handle_migrations(self, force_reset):
        """G√©rer les migrations de la base de donn√©es"""

        if force_reset:
            self.stdout.write(
                self.style.WARNING(
                    "‚ö†Ô∏è  Mode force activ√© - Suppression de la base de donn√©es..."
                )
            )

            # Confirmer la suppression
            confirm = input(
                "√ätes-vous s√ªr de vouloir supprimer toutes les donn√©es ? (y/n): "
            )
            if confirm.lower() not in ["oui", "o", "yes", "y"]:
                self.stdout.write(self.style.ERROR("‚ùå Op√©ration annul√©e"))
                return

            # Supprimer et recr√©er la base de donn√©es
            try:
                call_command("flush", "--noinput", verbosity=0)
                self.stdout.write(self.style.SUCCESS("‚úÖ Base de donn√©es vid√©e"))
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f"‚ö†Ô∏è  Impossible de vider la base: {str(e)}")
                )

        # Ex√©cuter les migrations
        self.stdout.write("üîÑ Application des migrations...")
        try:
            call_command("makemigrations", verbosity=0)
            call_command("migrate", verbosity=0)
            self.stdout.write(
                self.style.SUCCESS("‚úÖ Migrations appliqu√©es avec succ√®s")
            )
        except Exception as e:
            raise CommandError(f"Erreur lors des migrations: {str(e)}")

    def _create_superuser(self, email, password):
        """Cr√©er un superutilisateur"""
        self.stdout.write("üë§ Cr√©ation du superutilisateur...")

        # V√©rifier si un superutilisateur existe d√©j√†
        if User.objects.filter(is_superuser=True).exists():
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è  Un superutilisateur existe d√©j√†"))
            confirm = input("Voulez-vous en cr√©er un nouveau ? (y/n): ")
            if confirm.lower() not in ["oui", "o", "yes", "y"]:
                self.stdout.write(
                    self.style.WARNING("‚è≠Ô∏è  Cr√©ation du superutilisateur ignor√©e")
                )
                return

        try:
            # Supprimer l'ancien admin s'il existe
            User.objects.filter(email=email).delete()
            User.objects.filter(username="admin").delete()

            # Cr√©er le nouveau superutilisateur
            user = User.objects.create_superuser(
                username="admin",
                email=email,
                password=password,
                first_name="Admin",
                last_name="Blog",
            )

            self.stdout.write(
                self.style.SUCCESS(
                    f"‚úÖ Superutilisateur cr√©√© avec succ√®s!\n"
                    f"   üìß Email: {email}\n"
                    f"   üîë Mot de passe: {password}"
                )
            )

        except Exception as e:
            raise CommandError(
                f"Erreur lors de la cr√©ation du superutilisateur: {str(e)}"
            )

    def _populate_test_data(self):
        """Peupler la base de donn√©es avec des donn√©es de test"""
        self.stdout.write(
            "üìä Peuplement de la base de donn√©es avec des donn√©es de test..."
        )

        try:
            call_command("populate_db", verbosity=0)
            self.stdout.write(
                self.style.SUCCESS("‚úÖ Donn√©es de test cr√©√©es avec succ√®s")
            )
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(
                    f"‚ö†Ô∏è  Erreur lors du peuplement des donn√©es: {str(e)}\n"
                    "   Vous pouvez ex√©cuter manuellement: python manage.py populate_db"
                )
            )

    def _display_summary(self, options):
        """Afficher le r√©sum√© de la configuration"""

        # Statistiques de la base de donn√©es
        try:
            users_count = User.objects.count()

            # Importer dynamiquement les mod√®les pour √©viter les erreurs
            from blog.models import Article, Category, Tag, Comment

            articles_count = Article.objects.count()
            categories_count = Category.objects.count()
            tags_count = Tag.objects.count()
            comments_count = Comment.objects.count()
        except Exception:
            users_count = articles_count = categories_count = tags_count = (
                comments_count
            ) = "?"

        summary = f"""
{self.style.SUCCESS("="*60)}
{self.style.SUCCESS("üéâ CONFIGURATION TERMIN√âE AVEC SUCC√àS!")}
{self.style.SUCCESS("="*60)}

üìä STATISTIQUES DE LA BASE DE DONN√âES:
   üë• Utilisateurs: {users_count}
   üì∞ Articles: {articles_count}
   üè∑Ô∏è  Cat√©gories: {categories_count}
   üîñ Tags: {tags_count}
   üí¨ Commentaires: {comments_count}

üåê ACC√àS AU PROJET:
   üîó Site web: http://localhost:8000/
   ‚öôÔ∏è  Admin: http://localhost:8000/admin/
   
üöÄ COMMANDES UTILES:
   D√©marrer le serveur: python manage.py runserver
   Acc√©der au shell: python manage.py shell
   Collecter les fichiers statiques: python manage.py collectstatic

üí° CONSEILS:
   ‚Ä¢ Utilisez --help pour voir toutes les options disponibles
   ‚Ä¢ Ex√©cutez python manage.py populate_db pour ajouter plus de donn√©es
   ‚Ä¢ N'oubliez pas de configurer vos variables d'environnement en production

{self.style.SUCCESS("="*60)}
"""

        self.stdout.write(summary)

        # Informer l'utilisateur sur le d√©marrage du serveur
        self.stdout.write(
            self.style.SUCCESS(
                "\nüöÄ Pour d√©marrer le serveur de d√©veloppement, ex√©cutez :\n"
                "   python manage.py runserver\n"
                "\nüì± Puis ouvrez votre navigateur sur : http://localhost:8000/"
            )
        )
